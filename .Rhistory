return(height)
}
Bob_prior <- prior(0.5) # verifying that the function returns the prior
EAP <- function(student, lower=-6, upper=6){ # creating EAP function; takes in student object
# and integration limits, defaulted to -6 and 6
integrand <- function(x) lik_answers(student, x) * prior(x) # specifying function to
# integrate, we want to
# integrate the likelihood
# times the prior, given
# our data
posterior <- integrate(Vectorize(integrand), lower=lower, upper=upper) # we use
# the integrand in the
# integrate function to yield
# our expected a posteriori
# value
# initially, the integrate
# function threw a warning that
# the object lengths of the
# inputs did not match; the
# help file suggested using
# Vectorize() to get the
# function in the correct form
return(posterior)
}
EAP(Bob)
plotting <- function(student, lower_bound=-10,
upper_bound=10, questions=c(1:4), theta_EAP=TRUE){
# plotting function takes in the student, lower and upper bounds for the thetas to be
# plotted on the x axis, the questions the user wants plotted (each on its own plot),
# and whether the user wants theta_hat to be plotted
points <- seq(from=lower_bound, to=upper_bound, by=0.1)
# generating a vector of points for thetas
probs <- sapply(points, function(x) prob_answers(student, x)[[1]])
# calculating the probabilities for each question at each theta
probs_for_questions <- unlist(probs[questions,])
# subsetting the probabilities for the questions to be plotted
questions_correct <- sapply(questions, function(x) student$correct_answers[x]==1)
#evaluating if the student answers the questions to be plotted correctly
questions_color <- ifelse(questions_correct==TRUE, "forestgreen", "firebrick1")
# determining how to color each response function depending on correctness of answer
if(theta_EAP==TRUE){ # if the user wants the EAP calculated, we do so
theta_hat <- EAP(student)
}
plotting_function <- function(x){ # creating an internal plotting function
opar <- par(mar=c(5.1, 4.1, 4.1, 2.1))
# saving defaultmargin parameters so we can restore them after adding the legend
# for each plot
layout(matrix(c(1,2), nrow=2), heights = c(0.7,0.3)) # using layout to make room for
# a legend
# we plot the probabilities for each theta for the given question, with the appropriate
# color to indicate whether the answer is correct
plot(points, probs_for_questions[x,], type="l", col=questions_color[x],
xlab=expression(paste(theta, " values")),
ylab=expression(paste("Pr(P"[ij],"=1)")),
main=paste0("Response Function for Question ",questions[x]),
xaxt="n", yaxt="n")
# making margins more granular than default
axis(1, at=seq(from=lower_bound, to=upper_bound, by=1))
axis(2, at=seq(from=0, to=1, by=0.1), tick=TRUE)
# if the user wants the EAP plotted, we do so
if(exists("theta_hat")==TRUE){
abline(v=theta_hat$value, col="dodgerblue")
}
# adjusting plotting margins to create legend
par(mar=c(0,0,0,0))
plot(0,0, type="n", axes=FALSE, xlab="", ylab="") # creating null plot
# creating a legend for the null plot, which is effectively the legend for the above
# plot
# we need to create two different legends--one to be used if EAP is selected, the other
# if it is not
if(exists("theta_hat")==TRUE){
legend("center",
legend=c(paste0("Response Function (",student$name," answered correctly)"),
paste0("Response Function (",student$name," answered incorrectly)"),
paste0(student$name,"'s EAP")), # providing items in legend
col=c("forestgreen","firebrick1","dodgerblue"),
# providing color for each item in legend
lty = c(1,1,1)) # providing line type for each item in legend
} else {
legend("center",
legend=c(paste0("Response Function (",student$name," answered correctly)"),
paste0("Response Function (",student$name," answered incorrectly)")),
# providing items in legend
col=c("forestgreen","firebrick1"),
# providing color for each item in legend
lty = c(1,1)) # providing line type for each item in legend
}
par(opar) # resetting margins
}
# we create plots for each of the questions selected, by the index of the question in
# the questions specified
plots <- sapply(1:length(questions), function(x) plotting_function(x))
}
plotting(Bob, questions=c(5:7), theta_EAP = TRUE) # checking to see if function works
library(devtools)
library(roxygen2)
setwd("C://Users//drmiller1220//Documents//GitHub//MidtermExam") #This will need to be changed to match your directory
current.code <- as.package("raschPack")
load_all(current.code)
document(current.code)
install(pkg="raschPack", local=TRUE)
library(raschPack)
# simulating data for toy example
diff_params <- rnorm(20,0,2)
answers <- rbinom(20,1, prob=0.9)
bob <- new("Rasch", name="bob", difficulty=diff_params, correct_answers=answers)
bob_prob <- raschProb(bob, 1)
bob_lik <- raschLik(bob, 1)
bob_prior <- raschPrior(1)
bob_EAP <- raschEAP(bob)
plot(raschObj = bob, lower_bound=-10, upper_bound=10,
questions=c(1:4), theta_EAP=TRUE)
library(devtools)
library(roxygen2)
setwd("C://Users//drmiller1220//Documents//GitHub//MidtermExam") #This will need to be changed to match your directory
current.code <- as.package("raschPack")
load_all(current.code)
document(current.code)
install(pkg="raschPack", local=TRUE)
library(raschPack)
# simulating data for toy example
diff_params <- rnorm(20,0,2)
answers <- rbinom(20,1, prob=0.9)
bob <- new("Rasch", name="bob", difficulty=diff_params, correct_answers=answers)
bob_prob <- raschProb(bob, 1)
bob_lik <- raschLik(bob, 1)
bob_prior <- raschPrior(1)
bob_EAP <- raschEAP(bob)
plot(raschObj = bob, lower_bound=-10, upper_bound=10,
questions=c(1:4), theta_EAP=TRUE)
library(devtools)
library(roxygen2)
setwd("C://Users//drmiller1220//Documents//GitHub//MidtermExam") #This will need to be changed to match your directory
current.code <- as.package("raschPack")
load_all(current.code)
document(current.code)
install(pkg="raschPack", local=TRUE)
library(raschPack)
# simulating data for toy example
diff_params <- rnorm(20,0,2)
answers <- rbinom(20,1, prob=0.9)
bob <- new("Rasch", name="bob", difficulty=diff_params, correct_answers=answers)
bob_prob <- raschProb(bob, 1)
bob_lik <- raschLik(bob, 1)
bob_prior <- raschPrior(1)
bob_EAP <- raschEAP(bob)
plot(raschObj = bob, lower_bound=-10, upper_bound=10,
questions=c(1:4), theta_EAP=TRUE)
raschObj <- bob
points <- seq(from=lower_bound, to=upper_bound, by=0.1)
lower_bound <- -10
upper_bound <- 10
points <- seq(from=lower_bound, to=upper_bound, by=0.1)
# generating a vector of points for thetas
probs <- sapply(points, function(x){raschProb(raschObj, x)[[1]]})
plot(bob, lower_bound=-10, upper_bound=10,
questions=c(1:4), theta_EAP=TRUE)
current.code <- as.package("raschPack")
load_all(current.code)
document(current.code)
install(pkg="raschPack", local=TRUE)
library(raschPack)
# simulating data for toy example
diff_params <- rnorm(20,0,2)
answers <- rbinom(20,1, prob=0.9)
bob <- new("Rasch", name="bob", difficulty=diff_params, correct_answers=answers)
bob_prob <- raschProb(bob, 1)
bob_lik <- raschLik(bob, 1)
bob_prior <- raschPrior(1)
bob_EAP <- raschEAP(bob)
plot(bob, lower_bound=-10, upper_bound=10,
questions=c(1:4), theta_EAP=TRUE)
setwd("C://Users//drmiller1220//Documents//GitHub//MidtermExam") #This will need to be changed to match your directory
current.code <- as.package("raschPack")
load_all(current.code)
document(current.code)
install(pkg="raschPack", local=TRUE)
library(raschPack)
# simulating data for toy example
diff_params <- rnorm(20,0,2)
answers <- rbinom(20,1, prob=0.9)
bob <- new("Rasch", name="bob", difficulty=diff_params, correct_answers=answers)
bob_prob <- raschProb(bob, 1)
bob_lik <- raschLik(bob, 1)
bob_prior <- raschPrior(1)
bob_EAP <- raschEAP(bob)
plot(bob, lower_bound=-10, upper_bound=10,
questions=c(1:4), theta_EAP=TRUE)
current.code <- as.package("raschPack")
load_all(current.code)
document(current.code)
install(pkg="raschPack", local=TRUE)
library(raschPack)
# simulating data for toy example
diff_params <- rnorm(20,0,2)
answers <- rbinom(20,1, prob=0.9)
bob <- new("Rasch", name="bob", difficulty=diff_params, correct_answers=answers)
bob_prob <- raschProb(bob, 1)
bob_lik <- raschLik(bob, 1)
bob_prior <- raschPrior(1)
bob_EAP <- raschEAP(bob)
plot(bob, lower_bound=-10, upper_bound=10,
questions=c(1:4), theta_EAP=TRUE)
raschObj <- bob
lower_bound <- -10
upper_bound <- 10
questions <- 1:4
theta_EAP <- TRUE
points <- seq(from=lower_bound, to=upper_bound, by=0.1)
# generating a vector of points for thetas
probs <- sapply(points, function(x){raschProb(raschObj, x)[[1]]})
# calculating the probabilities for each question at each theta
probs_for_questions <- unlist(probs[questions,])
# subsetting the probabilities for the questions to be plotted
questions_correct <- sapply(questions, function(x){raschObj@correct_answers[x]==1})
#evaluating if the student answers the questions to be plotted correctly
questions_color <- ifelse(questions_correct==TRUE, "forestgreen", "firebrick1")
# determining how to color each response function depending on
# correctness of answer
if(theta_EAP==TRUE){ # if the user wants the EAP calculated, we do so
theta_hat <- raschEAP(raschObj)
}
plotting_function <- function(x){ # creating an internal plotting function
opar <- par(mar=c(5.1, 4.1, 4.1, 2.1))
# saving defaultmargin parameters so we can restore them after adding the legend
# for each plot
layout(matrix(c(1,2), nrow=2), heights = c(0.7,0.3)) # using layout to make
# room for a legend
# we plot the probabilities for each theta for the given question,
# with the appropriate color to indicate whether the answer is correct
plot(points, probs_for_questions[x,], type="l", col=questions_color[x],
xlab=expression(paste(theta, " values")),
ylab=expression(paste("Pr(P"[ij],"=1)")),
main=paste0("Response Function for Question ",questions[x]),
xaxt="n", yaxt="n")
# making margins more granular than default
axis(1, at=seq(from=lower_bound, to=upper_bound, by=1))
axis(2, at=seq(from=0, to=1, by=0.1), tick=TRUE)
# if the user wants the EAP plotted, we do so
if(exists("theta_hat")==TRUE){
abline(v=theta_hat@value, col="dodgerblue")
}
# adjusting plotting margins to create legend
par(mar=c(0,0,0,0))
plot(0,0, type="n", axes=FALSE, xlab="", ylab="") # creating null plot
# creating a legend for the null plot, which is effectively the legend for
# the above plot
# we need to create two different legends--one to be used if EAP is selected,
# the other if it is not
if(exists("theta_hat")==TRUE){
legend("center",
legend=c(paste0("Response Function (",raschObj@name," answered correctly)"),
paste0("Response Function (",raschObj@name," answered incorrectly)"),
paste0(raschObj@name,"'s EAP")), # providing items in legend
col=c("forestgreen","firebrick1","dodgerblue"),
# providing color for each item in legend
lty = c(1,1,1)) # providing line type for each item in legend
} else {
legend("center",
legend=c(paste0("Response Function (",raschObj@name," answered correctly)"),
paste0("Response Function (",raschObj@name," answered incorrectly)")),
# providing items in legend
col=c("forestgreen","firebrick1"),
# providing color for each item in legend
lty = c(1,1)) # providing line type for each item in legend
}
par(opar) # resetting margins
}
# we create plots for each of the questions selected,
# by the index of the question in the questions specified
plots <- sapply(1:length(questions), function(x) plotting_function(x))
current.code <- as.package("raschPack")
load_all(current.code)
document(current.code)
install(pkg="raschPack", local=TRUE)
plots <- sapply(1:length(questions), function(x) plotting_function(x))
plotting_function <- function(x){ # creating an internal plotting function
opar <- par(mar=c(5.1, 4.1, 4.1, 2.1))
# saving defaultmargin parameters so we can restore them after adding the legend
# for each plot
layout(matrix(c(1,2), nrow=2), heights = c(0.7,0.3)) # using layout to make
# room for a legend
# we plot the probabilities for each theta for the given question,
# with the appropriate color to indicate whether the answer is correct
plot(points, probs_for_questions[x,], type="l", col=questions_color[x],
xlab=expression(paste(theta, " values")),
ylab=expression(paste("Pr(P"[ij],"=1)")),
main=paste0("Response Function for Question ",questions[x]),
xaxt="n", yaxt="n")
# making margins more granular than default
axis(1, at=seq(from=lower_bound, to=upper_bound, by=1))
axis(2, at=seq(from=0, to=1, by=0.1), tick=TRUE)
# if the user wants the EAP plotted, we do so
if(exists("theta_hat")==TRUE){
abline(v=theta_hat@value, col="dodgerblue")
}
# adjusting plotting margins to create legend
par(mar=c(0,0,0,0))
plot(0,0, type="n", axes=FALSE, xlab="", ylab="") # creating null plot
# creating a legend for the null plot, which is effectively the legend for
# the above plot
# we need to create two different legends--one to be used if EAP is selected,
# the other if it is not
if(exists("theta_hat")==TRUE){
legend("center",
legend=c(paste0("Response Function (",raschObj@name," answered correctly)"),
paste0("Response Function (",raschObj@name," answered incorrectly)"),
paste0(raschObj@name,"'s EAP")), # providing items in legend
col=c("forestgreen","firebrick1","dodgerblue"),
# providing color for each item in legend
lty = c(1,1,1)) # providing line type for each item in legend
} else {
legend("center",
legend=c(paste0("Response Function (",raschObj@name," answered correctly)"),
paste0("Response Function (",raschObj@name," answered incorrectly)")),
# providing items in legend
col=c("forestgreen","firebrick1"),
# providing color for each item in legend
lty = c(1,1)) # providing line type for each item in legend
}
par(opar) # resetting margins
}
plotting_function(1)
current.code <- as.package("raschPack")
load_all(current.code)
document(current.code)
current.code <- as.package("raschPack")
load_all(current.code)
document(current.code)
install(pkg="raschPack", local=TRUE)
library(raschPack)
# simulating data for toy example
diff_params <- rnorm(20,0,2)
answers <- rbinom(20,1, prob=0.9)
bob <- new("Rasch", name="bob", difficulty=diff_params, correct_answers=answers)
bob_prob <- raschProb(bob, 1)
bob_lik <- raschLik(bob, 1)
bob_prior <- raschPrior(1)
bob_EAP <- raschEAP(bob)
plot(bob, lower_bound=-10, upper_bound=10,
questions=c(1:4), theta_EAP=TRUE)
class(bob)
library(devtools)
library(roxygen2)
setwd("C://Users//drmiller1220//Documents//GitHub//MidtermExam") #This will need to be changed to match your directory
current.code <- as.package("raschPack")
load_all(current.code)
document(current.code)
install(pkg="raschPack", local=TRUE)
library(raschPack)
# simulating data for toy example
diff_params <- rnorm(20,0,2)
answers <- rbinom(20,1, prob=0.9)
bob <- new("Rasch", name="bob", difficulty=diff_params, correct_answers=answers)
bob_prob <- raschProb(bob, 1)
bob_lik <- raschLik(bob, 1)
bob_prior <- raschPrior(1)
bob_EAP <- raschEAP(bob)
plot(bob, lower_bound=-10, upper_bound=10,
questions=c(1:4), theta_EAP=TRUE)
library(devtools)
library(roxygen2)
setwd("C://Users//drmiller1220//Documents//GitHub//MidtermExam") #This will need to be changed to match your directory
current.code <- as.package("raschPack")
load_all(current.code)
document(current.code)
install(pkg="raschPack", local=TRUE)
library(raschPack)
# simulating data for toy example
diff_params <- rnorm(20,0,2)
answers <- rbinom(20,1, prob=0.9)
bob <- new("Rasch", name="bob", difficulty=diff_params, correct_answers=answers)
bob_prob <- raschProb(bob, 1)
bob_lik <- raschLik(bob, 1)
bob_prior <- raschPrior(1)
bob_EAP <- raschEAP(bob)
plot(bob, lower_bound=-10, upper_bound=10,
questions=c(1:4), theta_EAP=TRUE)
library(devtools)
library(roxygen2)
setwd("C://Users//drmiller1220//Documents//GitHub//MidtermExam") #This will need to be changed to match your directory
current.code <- as.package("raschPack")
load_all(current.code)
document(current.code)
install(pkg="raschPack", local=TRUE)
diff_params <- rnorm(20,0,2)
answers <- rbinom(20,1, prob=0.9)
bob <- new("Rasch", name="bob", difficulty=diff_params, correct_answers=answers)
bob_prob <- raschProb(bob, 1)
bob_lik <- raschLik(bob, 1)
bob_prior <- raschPrior(1)
bob_EAP <- raschEAP(bob)
plot(bob, lower_bound=-10, upper_bound=10,
questions=c(1:4), theta_EAP=TRUE)
raschPlot(raschObj=bob, lower_bound=-10, upper_bound=10,
questions=c(1:4), theta_EAP=TRUE)
library(devtools)
library(roxygen2)
setwd("C://Users//drmiller1220//Documents//GitHub//MidtermExam") #This will need to be changed to match your directory
current.code <- as.package("raschPack")
load_all(current.code)
document(current.code)
install(pkg="raschPack", local=TRUE)
library(raschPack)
# simulating data for toy example
diff_params <- rnorm(20,0,2)
answers <- rbinom(20,1, prob=0.9)
bob <- new("Rasch", name="bob", difficulty=diff_params, correct_answers=answers)
bob_prob <- raschProb(bob, 1)
bob_lik <- raschLik(bob, 1)
bob_prior <- raschPrior(1)
bob_EAP <- raschEAP(bob)
raschPlot(raschObj=bob, lower_bound=-10, upper_bound=10,
questions=c(1:4), theta_EAP=TRUE)
library(devtools)
library(roxygen2)
setwd("C://Users//drmiller1220//Documents//GitHub//MidtermExam") #This will need to be changed to match your directory
current.code <- as.package("raschPack")
load_all(current.code)
document(current.code)
install(pkg="raschPack", local=TRUE)
library(raschPack)
# simulating data for toy example
diff_params <- rnorm(20,0,2)
answers <- rbinom(20,1, prob=0.9)
bob <- new("Rasch", name="bob", difficulty=diff_params, correct_answers=answers)
bob_prob <- raschProb(bob, 1)
bob_lik <- raschLik(bob, 1)
bob_prior <- raschPrior(1)
bob_EAP <- raschEAP(bob)
raschPlot(raschObj=bob, lower_bound=-10, upper_bound=10,
questions=c(1:4), theta_EAP=TRUE)
library(raschPack)
# simulating data for toy example
diff_params <- rnorm(20,0,2)
answers <- rbinom(20,1, prob=0.9)
bob <- new("Rasch", name="Bob", difficulty=diff_params, correct_answers=answers)
bob_prob <- raschProb(bob, 1)
bob_lik <- raschLik(bob, 1)
bob_prior <- raschPrior(1)
bob_EAP <- raschEAP(bob)
raschPlot(raschObj=bob, lower_bound=-10, upper_bound=10,
questions=c(1:4), theta_EAP=TRUE)
raschPlot(raschObj=bob, lower_bound=-10, upper_bound=10,
questions=c(1:20), theta_EAP=TRUE)
log(bob_lik)
diff_params <- rnorm(20,0,2)
answers <- rbinom(20,1, prob=0.9)
bob <- new("Rasch", name="Bob", difficulty=diff_params, correct_answers=answers)
bob_prob <- raschProb(bob, 1)
bob_lik <- raschLik(bob, 1)
bob_prior <- raschPrior(50)
bob_EAP <- raschEAP(bob)
raschPlot(raschObj=bob, lower_bound=-10, upper_bound=10,
questions=c(1:20), theta_EAP=TRUE)
bob_prior <- raschPrior(-10)
bob_EAP <- raschEAP(bob)
raschPlot(raschObj=bob, lower_bound=-10, upper_bound=10,
questions=c(1:20), theta_EAP=TRUE)
bob_prior <- raschPrior(-5)
bob_EAP <- raschEAP(bob)
library(raschPack)
# simulating data for toy example
diff_params <- rnorm(20,0,2)
answers <- rbinom(20,1, prob=0.9)
bob <- new("Rasch", name="Bob", difficulty=diff_params, correct_answers=answers)
bob_prob <- raschProb(bob, 1)
bob_lik <- raschLik(bob, 1)
bob_prior <- raschPrior(-5)
bob_EAP <- raschEAP(bob)
raschPlot(raschObj=bob, lower_bound=-10, upper_bound=10,
questions=c(1:20), theta_EAP=TRUE)
prod(1:10)
bob_prob <- raschProb(bob, 20)
bob_lik <- raschLik(bob, 1)
bob_lik <- raschLik(bob, 20)
bob_prior <- raschPrior(-5)
bob_EAP <- raschEAP(bob)
library(raschPack) # loading in the package
# simulating data for toy example
diff_params <- rnorm(20,0,2)
answers <- rbinom(20,1, prob=0.9)
bob <- new("Rasch", name="Bob", difficulty=diff_params, correct_answers=answers)
bob
bob_prob <- raschProb(bob, 20)
bob_prob
bob_prob <- raschProb(bob, 1)
bob_prob
# obtaining the probabilities for each question and for the observed data
bob_lik <- raschLik(bob, 1)
bob_lik
bob_prior <- raschPrior(2)
bob_EAP <- raschEAP(bob)
bob_prior <- raschPrior(2)
prior
bob_prior
# obtaining a prior probability
bob_EAP <- raschEAP(bob)
bob_EAP
raschPlot(raschObj=bob, lower_bound=-10, upper_bound=10,
questions=c(1:4), theta_EAP=TRUE)
raschPlot(raschObj=bob, lower_bound=-10, upper_bound=10,
questions=c(6), theta_EAP=TRUE)
raschPlot(raschObj=bob, lower_bound=-10, upper_bound=10,
questions=c(6,7), theta_EAP=TRUE)
raschPlot(raschObj=bob, lower_bound=-10, upper_bound=10,
questions=c(6,10,15), theta_EAP=TRUE)
raschPlot(raschObj=bob, lower_bound=-3, upper_bound=3,
questions=c(6,10,15), theta_EAP=TRUE)
raschPlot(raschObj=bob, lower_bound=-10, upper_bound=10,
questions=c(6,10,15), theta_EAP=FALSE)
chris <- new("Rasch", name="Chris", difficulty=c(1:5), correct_answers=c(1:6))
